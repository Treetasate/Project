import streamlit as st
import pandas as pd
from functools import reduce 
import plotly.express as px

file_path = "Data/Thesis.csv"

def load_data():
    # Load data from the CSV file
    data = pd.read_csv(file_path)
    data.fillna("", inplace=True)
    data = data.astype(str)
    return data

data = load_data()

# Custom CSS for dashboard styling
st.markdown("""
<style>
.big-font {
    font-size:20px !important;
    font-weight:bold;
}
.red-font {
    color:white;
}
.blue-font {
    color:white;
}
.green-font {
    color:white;
}
</style>
""", unsafe_allow_html=True)

st.title("üìâ Dashboard from CED üìà")

# Selection boxes for filtering
col1, col2, col3 = st.columns(3)
with col1:
    selected_advisor = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + list(data['‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤'].unique()))

with col2:
    selected_type = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + list(data['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ'].unique()))

with col3:
    # Extract unique years, sort them, and include "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    unique_years = sorted(data['‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤'].unique(), key=lambda x: int(x))
    selected_year = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + unique_years)

# Apply filtering based on selection
conditions = []
if selected_year != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    conditions.append(data['‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤'] == selected_year)
if selected_type != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    conditions.append(data['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ'] == selected_type)
if selected_advisor != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    conditions.append(data['‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤'] == selected_advisor)

if conditions:
    filtered_data = data.loc[reduce(lambda x, y: x & y, conditions)]
else:
    filtered_data = data.copy()

# Recalculate totals based on filtered data
unique_projects = filtered_data.shape[0]
unique_authors = pd.concat([filtered_data[col] for col in ['‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏≥1', '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏≥2', '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏≥3'] if col in filtered_data]).nunique()
unique_advisors = pd.concat([filtered_data[col] for col in ['‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤', '‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏£‡πà‡∏ß‡∏°1', '‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏£‡πà‡∏ß‡∏°2'] if col in filtered_data]).nunique()

# Displaying totals
st.title("")
col1, col2, col3 = st.columns(3)
with col1:
    st.markdown(f"<div class='big-font red-font'>‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î : {unique_projects}</div>", unsafe_allow_html=True)
with col2:
    st.markdown(f"<div class='big-font blue-font'>‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î : {unique_authors}</div>", unsafe_allow_html=True)
with col3:
    st.markdown(f"<div class='big-font green-font'>‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î : {unique_advisors}</div>", unsafe_allow_html=True)

st.title("")
st.dataframe(filtered_data)  # You can use st.table(filtered_data) if no interactivity is needed

# Creating a bar chart for the project types
project_type_counts = filtered_data['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ'].value_counts().reset_index()
project_type_counts.columns = ['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ', 'Count']
fig_bar = px.bar(project_type_counts, x='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ', y='Count', title='Distribution of Project Types')
st.plotly_chart(fig_bar)

# Creating a pie chart for the advisors
advisor_counts = filtered_data['‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤'].value_counts().reset_index()
advisor_counts.columns = ['‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤', 'Count']
fig_pie = px.pie(advisor_counts, values='Count', names='‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤', title='Distribution of Projects by Advisor')
st.plotly_chart(fig_pie)
